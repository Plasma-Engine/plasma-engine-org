version: '3.8'

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15
    container_name: plasma_postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: plasma
      POSTGRES_PASSWORD: plasma
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U plasma"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: plasma_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  neo4j:
    image: neo4j:5
    container_name: plasma_neo4j
    environment:
      NEO4J_AUTH: neo4j/plasmapass
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "neo4j", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: plasma_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  # =============================================================================
  # PYTHON MICROSERVICES
  # =============================================================================

  research-service:
    build:
      context: ./plasma-engine-research
      dockerfile: Dockerfile.dev
    container_name: plasma_research
    environment:
      - DATABASE_URL=postgresql://plasma:plasma@postgres:5432/plasma_research
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=plasmapass
      - PYTHONPATH=/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    volumes:
      - ./plasma-engine-research:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  content-service:
    build:
      context: ./plasma-engine-content
      dockerfile: Dockerfile.dev
    container_name: plasma_content
    environment:
      - DATABASE_URL=postgresql://plasma:plasma@postgres:5432/plasma_content
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - PYTHONPATH=/app
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./plasma-engine-content:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8002 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  brand-service:
    build:
      context: ./plasma-engine-brand
      dockerfile: Dockerfile.dev
    container_name: plasma_brand
    environment:
      - DATABASE_URL=postgresql://plasma:plasma@postgres:5432/plasma_brand
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./plasma-engine-brand:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  agent-service:
    build:
      context: ./plasma-engine-agent
      dockerfile: Dockerfile.dev
    container_name: plasma_agent
    environment:
      - DATABASE_URL=postgresql://plasma:plasma@postgres:5432/plasma_agent
      - REDIS_URL=redis://redis:6379
      - RESEARCH_SERVICE_URL=http://research-service:8000
      - CONTENT_SERVICE_URL=http://content-service:8002
      - BRAND_SERVICE_URL=http://brand-service:8001
      - PYTHONPATH=/app
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      research-service:
        condition: service_healthy
      content-service:
        condition: service_healthy
      brand-service:
        condition: service_healthy
    volumes:
      - ./plasma-engine-agent:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8003 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # GATEWAY SERVICE (Python/FastAPI)
  # =============================================================================

  gateway-service:
    build:
      context: ./plasma-engine-gateway
      dockerfile: Dockerfile.dev
    container_name: plasma_gateway
    environment:
      - DATABASE_URL=postgresql://plasma:plasma@postgres:5432/plasma_gateway
      - REDIS_URL=redis://redis:6379
      - RESEARCH_SERVICE_URL=http://research-service:8000
      - CONTENT_SERVICE_URL=http://content-service:8002
      - BRAND_SERVICE_URL=http://brand-service:8001
      - AGENT_SERVICE_URL=http://agent-service:8003
      - PYTHONPATH=/app
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      research-service:
        condition: service_healthy
      content-service:
        condition: service_healthy
      brand-service:
        condition: service_healthy
      agent-service:
        condition: service_healthy
    volumes:
      - ./plasma-engine-gateway:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 3000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  minio_data:

networks:
  default:
    name: plasma_network