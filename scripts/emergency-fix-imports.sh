#!/bin/bash

# Emergency fix script for Python import issues in Plasma Engine services
# This script provides an immediate fix to get services running

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}🚨 Emergency Import Path Fix for Plasma Engine Services${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"

# Detect which service we're in
CURRENT_DIR=$(pwd)
SERVICE_NAME=""

if [[ "$CURRENT_DIR" == *"plasma-engine-research"* ]]; then
    SERVICE_NAME="research"
elif [[ "$CURRENT_DIR" == *"plasma-engine-content"* ]]; then
    SERVICE_NAME="content"
elif [[ "$CURRENT_DIR" == *"plasma-engine-brand"* ]]; then
    SERVICE_NAME="brand"
elif [[ "$CURRENT_DIR" == *"plasma-engine-agent"* ]]; then
    SERVICE_NAME="agent"
elif [[ "$CURRENT_DIR" == *"plasma-engine-gateway"* ]]; then
    SERVICE_NAME="gateway"
else
    echo -e "${RED}❌ Could not detect service name from directory path${NC}"
    echo "Please run this script from a plasma-engine-* service directory"
    exit 1
fi

echo -e "${GREEN}✓ Detected service: plasma-engine-${SERVICE_NAME}${NC}"

# Step 1: Clear PYTHONPATH
echo -e "\n${YELLOW}Step 1: Clearing PYTHONPATH...${NC}"
unset PYTHONPATH
echo -e "${GREEN}✓ PYTHONPATH cleared${NC}"

# Step 2: Create missing __init__.py files
echo -e "\n${YELLOW}Step 2: Creating missing __init__.py files...${NC}"

if [ ! -f "app/__init__.py" ]; then
    touch app/__init__.py
    echo -e "${GREEN}✓ Created app/__init__.py${NC}"
else
    echo "  app/__init__.py already exists"
fi

if [ -d "app/routers" ] && [ ! -f "app/routers/__init__.py" ]; then
    cat > app/routers/__init__.py << 'EOF'
"""Router module - auto-generated by emergency fix."""
from fastapi import APIRouter

router = APIRouter()

# Import routers that exist in this directory
import os
from pathlib import Path

current_dir = Path(__file__).parent
for file in current_dir.glob("*.py"):
    if file.name not in ["__init__.py", "_*", ".*"]:
        module_name = file.stem
        try:
            # Try to import the router from the module
            module = __import__(f"app.routers.{module_name}", fromlist=["router"])
            if hasattr(module, "router"):
                router.include_router(module.router, prefix=f"/{module_name}", tags=[module_name])
                print(f"✓ Loaded router: {module_name}")
        except (ImportError, AttributeError) as e:
            print(f"⚠ Could not load router {module_name}: {e}")

__all__ = ["router"]
EOF
    echo -e "${GREEN}✓ Created app/routers/__init__.py${NC}"
else
    echo "  app/routers/__init__.py already exists or routers directory not found"
fi

# Step 3: Create isolated launch script
echo -e "\n${YELLOW}Step 3: Creating isolated launch script...${NC}"

cat > launch-isolated.sh << 'EOF'
#!/bin/bash
# Isolated launch script for the service

# Clear any existing PYTHONPATH
unset PYTHONPATH

# Set working directory to service root
cd "$(dirname "$0")"

# Set isolated PYTHONPATH
export PYTHONPATH="$(pwd)"

# Service-specific port assignments
case "$(basename $(pwd))" in
    *research*) PORT=8000 ;;
    *brand*) PORT=8001 ;;
    *content*) PORT=8002 ;;
    *agent*) PORT=8003 ;;
    *gateway*) PORT=8004 ;;
    *) PORT=8000 ;;
esac

echo "═══════════════════════════════════════════════════════"
echo "Starting service with isolated Python path"
echo "═══════════════════════════════════════════════════════"
echo "Service directory: $(pwd)"
echo "PYTHONPATH: $PYTHONPATH"
echo "Port: $PORT"
echo "═══════════════════════════════════════════════════════"

# Launch the service
python3.11 -m uvicorn app.main:app --port $PORT --reload
EOF

chmod +x launch-isolated.sh
echo -e "${GREEN}✓ Created launch-isolated.sh${NC}"

# Step 4: Clean Python cache
echo -e "\n${YELLOW}Step 4: Cleaning Python cache...${NC}"
find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
find . -type f -name "*.pyc" -delete 2>/dev/null || true
echo -e "${GREEN}✓ Python cache cleaned${NC}"

# Step 5: Create verification script
echo -e "\n${YELLOW}Step 5: Creating verification script...${NC}"

cat > verify-imports.py << 'EOF'
#!/usr/bin/env python3
import sys
import os

print("Import Verification")
print("=" * 40)
print(f"Python: {sys.version}")
print(f"CWD: {os.getcwd()}")
print(f"PYTHONPATH: {os.environ.get('PYTHONPATH', 'Not set')}")

print("\nAttempting imports...")
try:
    import app
    print("✓ app module imported")
    import app.main
    print("✓ app.main imported")
    if os.path.exists("app/routers"):
        import app.routers
        print("✓ app.routers imported")
    print("\n✅ All imports successful!")
except ImportError as e:
    print(f"\n❌ Import failed: {e}")
    sys.exit(1)
EOF

chmod +x verify-imports.py
echo -e "${GREEN}✓ Created verify-imports.py${NC}"

# Step 6: Run verification
echo -e "\n${YELLOW}Step 6: Running import verification...${NC}"
export PYTHONPATH="$(pwd)"
python3 verify-imports.py

echo -e "\n${BLUE}═══════════════════════════════════════════════════════${NC}"
echo -e "${GREEN}✅ Emergency fix complete!${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"

echo -e "\n${YELLOW}To start the service, run:${NC}"
echo -e "  ${GREEN}./launch-isolated.sh${NC}"

echo -e "\n${YELLOW}Or manually:${NC}"
echo -e "  ${GREEN}export PYTHONPATH=\"\$(pwd)\"${NC}"
echo -e "  ${GREEN}python3.11 -m uvicorn app.main:app --port 8000${NC}"

echo -e "\n${YELLOW}Note:${NC} If issues persist, check the full documentation at:"
echo "  docs/fix-import-path-issues.md in the plasma-engine-org repo"