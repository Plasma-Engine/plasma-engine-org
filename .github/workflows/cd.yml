name: CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      service:
        description: 'Service to deploy (leave empty for all)'
        required: false
        type: choice
        options:
        - ''
        - gateway
        - research
        - brand
        - content
        - agent

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      is_production: ${{ steps.env.outputs.is_production }}
    steps:
      - id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "is_production=${{ github.event.inputs.environment == 'production' }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "is_production=true" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
          fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.plasma-engine.dev
    strategy:
      matrix:
        service: [gateway, research, brand, content, agent]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to staging
        run: |
          echo "Deploying ${{ matrix.service }} to staging..."
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}:latest

          # Deploy using docker-compose or similar
          # This would be customized based on your deployment infrastructure
          echo "Deployment completed for ${{ matrix.service }}"

      - name: Run health checks
        run: |
          echo "Running health checks for ${{ matrix.service }}..."
          # Add health check commands here
          # curl -f https://staging-${{ matrix.service }}.plasma-engine.dev/health || exit 1
          echo "Health checks passed for ${{ matrix.service }}"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests for ${{ matrix.service }}..."
          # Add smoke test commands here
          echo "Smoke tests passed for ${{ matrix.service }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.environment == 'production'
    environment:
      name: production
      url: https://plasma-engine.dev
    strategy:
      matrix:
        service: [gateway, research, brand, content, agent]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment of ${{ matrix.service }}',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

      - name: Set deployment status to in progress
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment started for ${{ matrix.service }}'
            });

      - name: Deploy to production
        id: deploy
        run: |
          echo "Deploying ${{ matrix.service }} to production..."

          # Pull the specific tag or latest image
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="latest"
          fi

          docker pull ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}:$TAG

          # Blue-green deployment strategy
          echo "Performing blue-green deployment..."

          # Deploy to green environment
          echo "Deploying to green environment..."
          # Add your deployment commands here

          # Health check green environment
          echo "Health checking green environment..."
          # Add health check commands

          # Switch traffic from blue to green
          echo "Switching traffic to green environment..."
          # Add traffic switching commands

          echo "Production deployment completed for ${{ matrix.service }}"

      - name: Run production health checks
        run: |
          echo "Running production health checks for ${{ matrix.service }}..."
          # Add comprehensive health check commands
          sleep 30  # Wait for service to stabilize
          # curl -f https://${{ matrix.service }}.plasma-engine.dev/health || exit 1
          echo "Production health checks passed for ${{ matrix.service }}"

      - name: Set deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              description: 'Deployment successful for ${{ matrix.service }}',
              environment_url: 'https://${{ matrix.service }}.plasma-engine.dev'
            });

      - name: Set deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Deployment failed for ${{ matrix.service }}'
            });

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, determine-environment]
    if: failure() && needs.determine-environment.outputs.environment == 'production'
    environment:
      name: production
    strategy:
      matrix:
        service: [gateway, research, brand, content, agent]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Rollback deployment
        run: |
          echo "Rolling back ${{ matrix.service }} deployment..."

          # Get the previous successful deployment
          PREVIOUS_TAG=$(docker images ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }} --format "table {{.Tag}}" | grep -v "TAG\|latest" | head -1)

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Rolling back to tag: $PREVIOUS_TAG"
            docker pull ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}:$PREVIOUS_TAG

            # Perform rollback
            echo "Performing rollback..."
            # Add your rollback commands here

            echo "Rollback completed for ${{ matrix.service }}"
          else
            echo "No previous version found for rollback"
            exit 1
          fi

      - name: Verify rollback
        run: |
          echo "Verifying rollback for ${{ matrix.service }}..."
          # Add rollback verification commands
          sleep 30
          # curl -f https://${{ matrix.service }}.plasma-engine.dev/health || exit 1
          echo "Rollback verified for ${{ matrix.service }}"

      - name: Notify team of rollback
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Production Deployment Rollback - ${{ matrix.service }}',
              body: `
            ## Deployment Rollback Notice

            **Service:** ${{ matrix.service }}
            **Environment:** Production
            **Trigger:** Failed deployment from commit ${context.sha}
            **Time:** ${new Date().toISOString()}

            ### Actions Taken
            - ✅ Automatic rollback initiated
            - ⏳ Service health verification in progress

            ### Next Steps
            1. Investigate the deployment failure
            2. Fix the issues in the codebase
            3. Test thoroughly in staging
            4. Re-deploy when ready

            **Deployment Log:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
              `,
              labels: ['deployment', 'rollback', 'production', 'urgent']
            });

  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, determine-environment]
    if: success()
    steps:
      - name: Create success notification
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ needs.determine-environment.outputs.environment }}';
            const emoji = environment === 'production' ? '🚀' : '🧪';
            const url = environment === 'production' ? 'https://plasma-engine.dev' : 'https://staging.plasma-engine.dev';

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `${emoji} **Deployment Successful!**\n\n**Environment:** ${environment}\n**URL:** ${url}\n**Services:** All services deployed successfully`
            });