name: cursor-agent-python

on:
  pull_request:
    types: [labeled]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull request number to process"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  python-agent:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'agent:python') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Get PR information
        id: pr-info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          if [ -z "$PR_NUMBER" ]; then
            PR_NUMBER="${{ inputs.pr_number }}"
          fi
          
          if [ -z "$PR_NUMBER" ]; then
            echo "‚ùå PR number is required"
            exit 1
          fi
          
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "üêç Processing Python files in PR #$PR_NUMBER"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Install common Python tools for fixing issues
          pip install black isort flake8 mypy pylint bandit safety

      - name: Analyze Python files
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ steps.pr-info.outputs.pr_number }}
          
          # Get changed Python files
          PYTHON_FILES=$(gh pr diff $PR_NUMBER --name-only | grep -E '\.(py|pyi)$' || echo "")
          
          if [ -z "$PYTHON_FILES" ]; then
            echo "No Python files found in this PR"
            echo "has_python_files=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          echo "has_python_files=true" >> "$GITHUB_OUTPUT"
          echo "Found Python files:"
          echo "$PYTHON_FILES"
          
          # Store files for processing
          echo "$PYTHON_FILES" > python_files.txt

      - name: Apply Python fixes
        if: steps.analyze.outputs.has_python_files == 'true'
        run: |
          echo "üîß Applying Python code fixes..."
          
          # Read the Python files
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "Processing: $file"
              
              # Apply black formatting
              black "$file" --quiet || echo "Black formatting failed for $file"
              
              # Apply isort import sorting
              isort "$file" --quiet || echo "isort failed for $file"
              
              # Try to fix some common flake8 issues automatically
              # Remove trailing whitespace
              sed -i 's/[[:space:]]*$//' "$file"
              
              # Fix some basic syntax issues
              # Add missing newline at end of file
              if [ -n "$(tail -c1 "$file")" ]; then
                echo "" >> "$file"
              fi
            fi
          done < python_files.txt

      - name: Run Python quality checks
        if: steps.analyze.outputs.has_python_files == 'true'
        continue-on-error: true
        run: |
          echo "üîç Running Python quality checks..."
          
          # Run flake8 on changed files
          if [ -s python_files.txt ]; then
            echo "Running flake8..."
            flake8 $(cat python_files.txt) --max-line-length=88 --extend-ignore=E203,W503 || true
            
            echo "Running basic safety check..."
            safety check --json || true
          fi

      - name: Commit Python fixes
        if: steps.analyze.outputs.has_python_files == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "Cursor Python Agent"
          
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "‚úÖ No Python formatting changes needed"
            echo "changes_made=false" >> "$GITHUB_OUTPUT"
          else
            echo "üìù Committing Python code improvements..."
            git add -A
            git commit -m "üêç Python Agent: Apply code formatting and fixes

- Applied black formatting
- Sorted imports with isort
- Fixed trailing whitespace
- Ensured proper file endings

Auto-generated by cursor-agent-python workflow"
            
            git push origin HEAD
            echo "changes_made=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Python fixes committed and pushed"
          fi

      - name: Update PR status
        if: steps.analyze.outputs.has_python_files == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ steps.pr-info.outputs.pr_number }}
          
          # Remove the agent:python label to indicate completion
          gh pr edit $PR_NUMBER --remove-label "agent:python" || echo "Could not remove label"
          
          # Add completion comment
          gh pr comment $PR_NUMBER --body "üêç **Python Agent Complete**

The Python cursor agent has finished processing this PR:

- ‚úÖ Applied black code formatting
- ‚úÖ Sorted imports with isort  
- ‚úÖ Fixed trailing whitespace and file endings
- ‚úÖ Ran basic quality checks

The \`agent:python\` label has been removed. Other cursor agents may still be processing this PR." || echo "Could not add comment"

      - name: Handle no Python files
        if: steps.analyze.outputs.has_python_files == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ steps.pr-info.outputs.pr_number }}
          
          echo "No Python files found, removing agent:python label"
          gh pr edit $PR_NUMBER --remove-label "agent:python" || echo "Could not remove label"