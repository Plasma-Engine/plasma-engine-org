name: Self-Healing Repository Orchestrator

on:
  schedule:
    # Every 15 minutes during business hours (more responsive)
    - cron: "*/15 8-18 * * 1-5"
    # Every 30 minutes outside business hours (rate-limit friendly)
    - cron: "*/30 0-7,19-23 * * *"
    # Every hour on weekends
    - cron: "0 * * * 0,6"
  
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  
  pull_request_review:
    types: [submitted, dismissed]
  
  issues:
    types: [labeled, unlabeled]
  
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull request number to process'
        required: false
      force_claude_repair:
        description: 'Force Claude repair attempt'
        type: boolean
        default: false
      force_cursor_dispatch:
        description: 'Force Cursor agent dispatch'
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  checks: write

env:
  # Rate limiting configuration
  CODERABBIT_MAX_REQUESTS_PER_HOUR: 60
  CLAUDE_MAX_REQUESTS_PER_HOUR: 100
  CURSOR_MAX_REQUESTS_PER_HOUR: 50
  
  # Retry configuration
  MAX_RETRY_ATTEMPTS: 3
  BASE_RETRY_DELAY: 2
  
  # State tracking
  SELF_HEALING_STATE_FILE: .github/state/self-healing-state.json

jobs:
  # ═══════════════════════════════════════════════════════════
  # State Management and Rate Limiting
  # ═══════════════════════════════════════════════════════════
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should_run_coderabbit: ${{ steps.rate_check.outputs.coderabbit_ok }}
      should_run_claude: ${{ steps.rate_check.outputs.claude_ok }}
      should_run_cursor: ${{ steps.rate_check.outputs.cursor_ok }}
      pr_numbers: ${{ steps.discovery.outputs.pr_numbers }}
      total_prs: ${{ steps.discovery.outputs.total_prs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests python-dateutil

      - name: Rate limit check
        id: rate_check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/automation/rate_limiter.py

      - name: Discover pull requests
        id: discovery
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/automation/pr_discovery.py

  # ═══════════════════════════════════════════════════════════
  # CodeRabbit Orchestration (Primary Review)
  # ═══════════════════════════════════════════════════════════
  coderabbit-review:
    name: CodeRabbit Review Orchestration
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should_run_coderabbit == 'true' && needs.pre-flight.outputs.total_prs > 0
    strategy:
      matrix:
        pr_number: ${{ fromJson(needs.pre-flight.outputs.pr_numbers) }}
      max-parallel: 3  # Prevent overwhelming CodeRabbit
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Enhanced CodeRabbit follow-up
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          INPUT_PR_NUMBER: ${{ matrix.pr_number }}
          CODERABBIT_LOGINS: ${{ vars.CODERABBIT_LOGINS }}
        run: |
          echo "Processing PR #${{ matrix.pr_number }} with enhanced CodeRabbit follow-up"
          python scripts/automation/enhanced_coderabbit_followup.py

  # ═══════════════════════════════════════════════════════════
  # Claude AI Code Repair (Secondary)
  # ═══════════════════════════════════════════════════════════
  claude-repair:
    name: Claude AI Auto-Repair
    runs-on: ubuntu-latest
    needs: [pre-flight, coderabbit-review]
    if: always() && needs.pre-flight.outputs.should_run_claude == 'true'
    strategy:
      matrix:
        pr_number: ${{ fromJson(needs.pre-flight.outputs.pr_numbers) }}
      max-parallel: 2  # Claude has higher rate limits but still be conservative
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Claude dependencies
        run: |
          pip install anthropic requests python-dateutil

      - name: Claude Auto-Repair
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          INPUT_PR_NUMBER: ${{ matrix.pr_number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          FORCE_REPAIR: ${{ inputs.force_claude_repair }}
        run: |
          echo "Attempting Claude-based auto-repair for PR #${{ matrix.pr_number }}"
          python scripts/automation/claude_auto_repair.py

  # ═══════════════════════════════════════════════════════════
  # Cursor Agent Dispatch (Tertiary/Fallback)
  # ═══════════════════════════════════════════════════════════
  cursor-dispatch:
    name: Cursor Agent Dispatch
    runs-on: ubuntu-latest
    needs: [pre-flight, coderabbit-review, claude-repair]
    if: always() && needs.pre-flight.outputs.should_run_cursor == 'true'
    strategy:
      matrix:
        pr_number: ${{ fromJson(needs.pre-flight.outputs.pr_numbers) }}
      max-parallel: 1  # Cursor agents are heavyweight, serialize execution
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Enhanced Cursor Dispatch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          INPUT_PR_NUMBER: ${{ matrix.pr_number }}
          CURSOR_AGENT_CLASSIFIERS: ${{ vars.CURSOR_AGENT_CLASSIFIERS }}
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          FORCE_DISPATCH: ${{ inputs.force_cursor_dispatch }}
        run: |
          echo "Dispatching enhanced Cursor agents for PR #${{ matrix.pr_number }}"
          python scripts/automation/enhanced_cursor_dispatch.py

  # ═══════════════════════════════════════════════════════════
  # Health Monitoring and Escalation
  # ═══════════════════════════════════════════════════════════
  health-monitor:
    name: System Health Monitor
    runs-on: ubuntu-latest
    needs: [pre-flight, coderabbit-review, claude-repair, cursor-dispatch]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: System Health Check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "Performing system health check and escalation logic"
          python scripts/automation/health_monitor.py

  # ═══════════════════════════════════════════════════════════
  # Post-Processing and Cleanup
  # ═══════════════════════════════════════════════════════════
  cleanup:
    name: State Cleanup
    runs-on: ubuntu-latest
    needs: [health-monitor]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cleanup state and optimize
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Cleaning up temporary state and optimizing for next run"
          python scripts/automation/state_cleanup.py