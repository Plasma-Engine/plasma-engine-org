name: CI - Build, Test, Security, Package

# This workflow orchestrates build → test → security → package stages
# for all subprojects. Each step is annotated with purpose, inputs, and outputs.
# TODO: Align service matrix with actual repos present in this monorepo workspace.

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  discover:
    name: Discover Projects
    runs-on: ubuntu-latest
    outputs:
      has_gateway: ${{ steps.detect.outputs.has_gateway }}
      has_infra: ${{ steps.detect.outputs.has_infra }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: detect
        name: Detect subprojects
        run: |
          echo "has_gateway=false" >> "$GITHUB_OUTPUT"
          echo "has_infra=false" >> "$GITHUB_OUTPUT"
          [ -d plasma-engine-gateway ] && echo "has_gateway=true" >> "$GITHUB_OUTPUT"
          [ -d plasma-engine-infra ] && echo "has_infra=true" >> "$GITHUB_OUTPUT"

  node_ci:
    name: Gateway CI (Node)
    needs: discover
    if: needs.discover.outputs.has_gateway == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        working-directory: plasma-engine-gateway
        run: |
          npm ci
        # Purpose: install exact lockfile deps for reproducible builds
        # Inputs: package-lock.json
        # Outputs: node_modules/ installed
      - name: Lint
        working-directory: plasma-engine-gateway
        run: |
          npm run lint --if-present || npx eslint . || true
        # Purpose: enforce code quality; allow soft-fail until rules are finalized
        # TODO: tighten to hard fail
      - name: Test
        working-directory: plasma-engine-gateway
        run: |
          npm test --if-present || npx vitest run || true
        # Purpose: execute unit tests; soft-fail temporarily
      - name: Build
        working-directory: plasma-engine-gateway
        run: |
          npm run build --if-present || echo "No build step defined"
        # Purpose: produce build artifacts (if any)

  python_ci:
    name: Python Services CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ plasma-engine-agent, plasma-engine-brand, plasma-engine-content, plasma-engine-research ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dev deps
        working-directory: ${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint (ruff)
        working-directory: ${{ matrix.service }}
        run: |
          ruff check . || true
        # Purpose: static analysis; soft-fail initially
      - name: Format check (black)
        working-directory: ${{ matrix.service }}
        run: |
          black --check . || true
      - name: Tests (pytest)
        working-directory: ${{ matrix.service }}
        run: |
          pytest -q || true

  security:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: [ node_ci, python_ci ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      - name: npm audit (gateway)
        if: ${{ hashFiles('plasma-engine-gateway/package.json') != '' }}
        working-directory: plasma-engine-gateway
        run: npm audit --audit-level=high || true
      - name: pip-audit (python services)
        run: |
          python -m pip install pip-audit || true
          for d in plasma-engine-agent plasma-engine-brand plasma-engine-content plasma-engine-research; do \
            if [ -d "$d" ]; then (cd "$d" && pip-audit || true); fi; \
          done

  package:
    name: Package Artifacts
    needs: [ node_ci, python_ci ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Package gateway docker image
        if: ${{ hashFiles('plasma-engine-gateway/Dockerfile') != '' }}
        uses: docker/build-push-action@v6
        with:
          context: plasma-engine-gateway
          push: false
          tags: ghcr.io/${{ github.repository_owner }}/plasma-engine-gateway:sha-${{ github.sha }}
        # Purpose: build container image; push disabled on CI

