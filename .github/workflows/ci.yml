name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.13'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      gateway: ${{ steps.changes.outputs.gateway }}
      research: ${{ steps.changes.outputs.research }}
      brand: ${{ steps.changes.outputs.brand }}
      content: ${{ steps.changes.outputs.content }}
      agent: ${{ steps.changes.outputs.agent }}
      shared: ${{ steps.changes.outputs.shared }}
      infra: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            gateway:
              - 'plasma-engine-gateway/**'
            research:
              - 'plasma-engine-research/**'
            brand:
              - 'plasma-engine-brand/**'
            content:
              - 'plasma-engine-content/**'
            agent:
              - 'plasma-engine-agent/**'
            shared:
              - 'plasma-engine-shared/**'
            infra:
              - 'plasma-engine-infra/**'

  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python tools
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy bandit

      - name: Install Node.js dependencies (Gateway)
        if: hashFiles('plasma-engine-gateway/package.json') != ''
        run: |
          cd plasma-engine-gateway
          npm ci

      - name: Run Python formatting check
        run: |
          black --check --diff .
          ruff check .

      - name: Run Python type checking
        run: |
          find . -name "*.py" -path "./plasma-engine-*/app/*" | head -5 | xargs mypy --ignore-missing-imports --no-error-summary || true

      - name: Run Node.js linting (Gateway)
        if: hashFiles('plasma-engine-gateway/package.json') != ''
        run: |
          cd plasma-engine-gateway
          npm run lint

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-format]
    strategy:
      matrix:
        service: [gateway, research, brand, content, agent]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        if: matrix.service == 'gateway'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'plasma-engine-${{ matrix.service }}/package-lock.json'

      - name: Set up Python
        if: matrix.service != 'gateway'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'plasma-engine-${{ matrix.service }}/requirements.txt'

      - name: Install dependencies (Node.js)
        if: matrix.service == 'gateway' && needs.detect-changes.outputs.gateway == 'true'
        run: |
          cd plasma-engine-${{ matrix.service }}
          npm ci

      - name: Install dependencies (Python)
        if: matrix.service != 'gateway' && (needs.detect-changes.outputs[matrix.service] == 'true' || github.event_name == 'push')
        run: |
          cd plasma-engine-${{ matrix.service }}
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx pytest-cov

      - name: Run tests (Node.js)
        if: matrix.service == 'gateway' && needs.detect-changes.outputs.gateway == 'true'
        run: |
          cd plasma-engine-${{ matrix.service }}
          npm test

      - name: Run tests (Python)
        if: matrix.service != 'gateway' && (needs.detect-changes.outputs[matrix.service] == 'true' || github.event_name == 'push')
        run: |
          cd plasma-engine-${{ matrix.service }}
          python -m pytest tests/ -v --cov=app --cov-report=xml

      - name: Upload coverage reports
        if: (matrix.service != 'gateway' && (needs.detect-changes.outputs[matrix.service] == 'true' || github.event_name == 'push'))
        uses: codecov/codecov-action@v4
        with:
          file: plasma-engine-${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: codecov-${{ matrix.service }}

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [detect-changes]
    strategy:
      matrix:
        service: [gateway, research, brand, content, agent]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        if: matrix.service == 'gateway'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Python
        if: matrix.service != 'gateway'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python security tools
        if: matrix.service != 'gateway'
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Install dependencies (Node.js)
        if: matrix.service == 'gateway' && needs.detect-changes.outputs.gateway == 'true'
        run: |
          cd plasma-engine-${{ matrix.service }}
          npm ci

      - name: Install dependencies (Python)
        if: matrix.service != 'gateway' && (needs.detect-changes.outputs[matrix.service] == 'true' || github.event_name == 'push')
        run: |
          cd plasma-engine-${{ matrix.service }}
          python -m pip install -r requirements.txt

      - name: Run npm audit (Node.js)
        if: matrix.service == 'gateway' && needs.detect-changes.outputs.gateway == 'true'
        run: |
          cd plasma-engine-${{ matrix.service }}
          npm audit --audit-level=high

      - name: Run Bandit security scan (Python)
        if: matrix.service != 'gateway' && (needs.detect-changes.outputs[matrix.service] == 'true' || github.event_name == 'push')
        run: |
          cd plasma-engine-${{ matrix.service }}
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/

      - name: Run Safety check (Python)
        if: matrix.service != 'gateway' && (needs.detect-changes.outputs[matrix.service] == 'true' || github.event_name == 'push')
        run: |
          cd plasma-engine-${{ matrix.service }}
          safety check

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        if: matrix.service == 'gateway' && needs.detect-changes.outputs.gateway == 'true'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=plasma-engine-${{ matrix.service }}/package.json

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan, detect-changes]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [gateway, research, brand, content, agent]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        if: needs.detect-changes.outputs[matrix.service] == 'true' || github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: plasma-engine-${{ matrix.service }}
          file: plasma-engine-${{ matrix.service }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        if: needs.detect-changes.outputs[matrix.service] == 'true' || github.event_name == 'push'
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: needs.detect-changes.outputs[matrix.service] == 'true' || github.event_name == 'push'
        with:
          sarif_file: 'trivy-results.sarif'

  dependabot-auto-merge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Auto-merge minor and patch updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor'
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}