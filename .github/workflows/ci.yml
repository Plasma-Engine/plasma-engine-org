name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # ═══════════════════════════════════════════════════════════
  # Linting and Code Quality
  # ═══════════════════════════════════════════════════════════
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            plasma-engine-gateway/package-lock.json
            plasma-engine-frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Lint TypeScript Services
        run: |
          cd plasma-engine-gateway && npm ci && npm run lint
          cd ../plasma-engine-frontend && npm ci && npm run lint

      - name: Lint Python Services
        run: |
          pip install ruff black mypy
          for service in research brand content agent; do
            echo "Linting plasma-engine-$service"
            cd plasma-engine-$service
            ruff check .
            black --check .
            mypy app/ --ignore-missing-imports
            cd ..
          done

  # ═══════════════════════════════════════════════════════════
  # Security Scanning
  # ═══════════════════════════════════════════════════════════
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=high

      - name: Run Bandit Security Scan (Python)
        run: |
          pip install bandit
          for service in research brand content agent; do
            echo "Scanning plasma-engine-$service"
            bandit -r plasma-engine-$service/app -ll
          done

      - name: Run npm audit
        run: |
          cd plasma-engine-gateway && npm audit --audit-level=high
          cd ../plasma-engine-frontend && npm audit --audit-level=high

  # ═══════════════════════════════════════════════════════════
  # Unit Tests - TypeScript Services
  # ═══════════════════════════════════════════════════════════
  test-typescript:
    name: Test TypeScript Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [gateway, frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: plasma-engine-${{ matrix.service }}/package-lock.json

      - name: Install Dependencies
        run: cd plasma-engine-${{ matrix.service }} && npm ci

      - name: Run Tests
        run: cd plasma-engine-${{ matrix.service }} && npm test -- --coverage

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./plasma-engine-${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # ═══════════════════════════════════════════════════════════
  # Unit Tests - Python Services
  # ═══════════════════════════════════════════════════════════
  test-python:
    name: Test Python Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [research, brand, content, agent]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          cd plasma-engine-${{ matrix.service }}
          pip install -e .
          pip install pytest pytest-cov pytest-asyncio

      - name: Run Tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_${{ matrix.service }}
          REDIS_URL: redis://localhost:6379
        run: |
          cd plasma-engine-${{ matrix.service }}
          pytest tests/ --cov=app --cov-report=xml --cov-report=term

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./plasma-engine-${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # ═══════════════════════════════════════════════════════════
  # Integration Tests
  # ═══════════════════════════════════════════════════════════
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-typescript, test-python]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          docker-compose -f docker-compose.yml config

      - name: Start Services
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to be ready

      - name: Run Integration Tests
        run: |
          # Test health endpoints
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8001/health || exit 1
          curl -f http://localhost:8002/health || exit 1
          curl -f http://localhost:8003/health || exit 1

      - name: Stop Services
        if: always()
        run: docker-compose down

  # ═══════════════════════════════════════════════════════════
  # Build Docker Images
  # ═══════════════════════════════════════════════════════════
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, security, test-typescript, test-python]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [gateway, research, brand, content, agent, frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./plasma-engine-${{ matrix.service }}
          push: true
          tags: |
            ghcr.io/plasma-engine/plasma-engine-${{ matrix.service }}:latest
            ghcr.io/plasma-engine/plasma-engine-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ═══════════════════════════════════════════════════════════
  # Deploy to Staging (only on main branch)
  # ═══════════════════════════════════════════════════════════
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          # kubectl apply -f k8s/staging/
          # or use Helm, ArgoCD, etc.