version: '3.9'

services:
  # Infrastructure Services
  postgres:
    image: postgres:16-alpine
    container_name: plasma-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-plasma}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-plasma_dev}
      POSTGRES_DB: ${POSTGRES_DB:-plasma_engine}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-plasma}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - plasma-net

  redis:
    image: redis:7-alpine
    container_name: plasma-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - plasma-net

  neo4j:
    image: neo4j:5-community
    container_name: plasma-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-neo4j_dev}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - plasma-net

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: plasma-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-plasma}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbit_dev}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-plasma}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - plasma-net

  # Application Services
  gateway:
    build:
      context: ./plasma-engine-gateway
      dockerfile: Dockerfile.dev
      args:
        ENVIRONMENT: development
    container_name: plasma-gateway
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-plasma}:${POSTGRES_PASSWORD:-plasma_dev}@postgres:5432/plasma_engine
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:3001,http://localhost:3002}
      ENVIRONMENT: development
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
    ports:
      - "${GATEWAY_PORT:-8000}:8000"
    volumes:
      - ./plasma-engine-gateway:/app
      - gateway_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - plasma-net
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  research:
    build:
      context: ./plasma-engine-research
      dockerfile: Dockerfile.dev
      args:
        ENVIRONMENT: development
    container_name: plasma-research
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-plasma}:${POSTGRES_PASSWORD:-plasma_dev}@postgres:5432/plasma_research
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-neo4j_dev}
      REDIS_URL: redis://redis:6379/1
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-plasma}:${RABBITMQ_PASSWORD:-rabbit_dev}@rabbitmq:5672/${RABBITMQ_VHOST:-plasma}
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER:-plasma}:${RABBITMQ_PASSWORD:-rabbit_dev}@rabbitmq:5672/${RABBITMQ_VHOST:-plasma}
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      ENVIRONMENT: development
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
    ports:
      - "${RESEARCH_PORT:-8001}:8001"
    volumes:
      - ./plasma-engine-research:/app
      - research_logs:/app/logs
      - research_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - plasma-net
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]

  brand:
    build:
      context: ./plasma-engine-brand
      dockerfile: Dockerfile.dev
      args:
        ENVIRONMENT: development
    container_name: plasma-brand
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-plasma}:${POSTGRES_PASSWORD:-plasma_dev}@postgres:5432/plasma_brand
      REDIS_URL: redis://redis:6379/3
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-plasma}:${RABBITMQ_PASSWORD:-rabbit_dev}@rabbitmq:5672/${RABBITMQ_VHOST:-plasma}
      ENVIRONMENT: development
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
    ports:
      - "${BRAND_PORT:-8002}:8002"
    volumes:
      - ./plasma-engine-brand:/app
      - brand_logs:/app/logs
      - brand_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - plasma-net
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8002", "--reload"]

  content:
    build:
      context: ./plasma-engine-content
      dockerfile: Dockerfile.dev
      args:
        ENVIRONMENT: development
    container_name: plasma-content
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-plasma}:${POSTGRES_PASSWORD:-plasma_dev}@postgres:5432/plasma_content
      REDIS_URL: redis://redis:6379/4
      GATEWAY_URL: http://gateway:8000
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NODE_ENV: development
    ports:
      - "${CONTENT_PORT:-3000}:3000"
    volumes:
      - ./plasma-engine-content:/app
      - content_node_modules:/app/node_modules
      - content_next:/app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - plasma-net
    command: ["npm", "run", "dev"]

  agent:
    build:
      context: ./plasma-engine-agent
      dockerfile: Dockerfile.dev
      args:
        ENVIRONMENT: development
    container_name: plasma-agent
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-plasma}:${POSTGRES_PASSWORD:-plasma_dev}@postgres:5432/plasma_agent
      REDIS_URL: redis://redis:6379/5
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-plasma}:${RABBITMQ_PASSWORD:-rabbit_dev}@rabbitmq:5672/${RABBITMQ_VHOST:-plasma}
      GATEWAY_URL: http://gateway:8000
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NODE_ENV: development
    ports:
      - "${AGENT_PORT:-3001}:3001"
    volumes:
      - ./plasma-engine-agent:/app
      - agent_node_modules:/app/node_modules
      - agent_next:/app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - plasma-net
    command: ["npm", "run", "dev"]

  # Development Tools
  adminer:
    image: adminer:4.8.1
    container_name: plasma-adminer
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: ${ADMINER_DESIGN:-pepa-linha}
    networks:
      - plasma-net
    depends_on:
      - postgres

  mailhog:
    image: mailhog/mailhog:latest
    container_name: plasma-mailhog
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    networks:
      - plasma-net

networks:
  plasma-net:
    driver: bridge
    name: plasma-network

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  rabbitmq_data:
  gateway_logs:
  research_logs:
  research_data:
  brand_logs:
  brand_data:
  content_node_modules:
  content_next:
  agent_node_modules:
  agent_next: