version: '3.8'

services:
  # Sentiment Analysis Pipeline
  sentiment-pipeline:
    build:
      context: .
      dockerfile: Dockerfile.sentiment
    container_name: plasma-sentiment-pipeline
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=postgresql://plasma:plasma@postgres:5432/plasma_brand
      - SENTIMENT_MODELS=vader,roberta,xlm-roberta
      - BATCH_SIZE=100
      - MAX_WORKERS=4
      - LOG_LEVEL=INFO
    ports:
      - "8004:8000"
    volumes:
      - ./sentiment_analysis:/app/sentiment_analysis
      - ./logs:/app/logs
      - sentiment-models:/home/sentiment/.cache
    depends_on:
      - redis
      - postgres
      - kafka
    networks:
      - plasma-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Redis for caching and distributed processing
  redis:
    image: redis:7-alpine
    container_name: plasma-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    networks:
      - plasma-network

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: plasma-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=plasma
      - POSTGRES_PASSWORD=plasma
      - POSTGRES_DB=plasma_brand
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - plasma-network

  # Kafka for streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: plasma-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - plasma-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: plasma-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - plasma-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: plasma-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - plasma-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: plasma-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=plasma
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - plasma-network

  # Development tools (optional)
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: plasma-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=plasma
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./sentiment_analysis:/home/jovyan/sentiment_analysis
    networks:
      - plasma-network
    profiles:
      - development

networks:
  plasma-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  kafka-data:
  prometheus-data:
  grafana-data:
  sentiment-models: